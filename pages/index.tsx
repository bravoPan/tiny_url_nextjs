import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { idToLongURL } from '../modules/encrypt/encrypt'
import { shortURLtoID } from '../modules/decrypt/decrypt'
import { useRouter } from 'next/router'
import { useState } from 'react'
import { ChangeEvent } from 'react'
import { FormElement } from '@nextui-org/react'

import { UrlRow } from '../components/Home/shortImage'
import { HeaderTitleText } from '../components/Home/header'

import { useSession, signIn, signOut } from "next-auth/react";
import { githubInfo } from '../modules/firestore/dataProcess'
import { queryReponse } from './api/db'
import { Input, Spacer, Navbar, Grid, Text, Button, Loading, Container } from "@nextui-org/react";
import { SpeedInsights } from "@vercel/speed-insights/next"


const inter = Inter({ subsets: ['latin'] })

const postLongURL = async (longURL: string, githubData: githubInfo) => {
  if (longURL === "")
    return
  const response = await fetch('/api/db', {
    method: "POST",
    body: JSON.stringify({ longURL, githubData }),
    headers: {
      'Content-Type': 'application/json'
    }
  })
  const data = await response.json()
  return data
}

const queryURL = async (longURL: string) => {
  const response = await fetch(`/api/db?longURL=${longURL}`, {
    method: "GET",
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (response.status === 200) {
    // console.log(response.json())
    const resp: queryReponse = await response.json()
    return resp.longURL
  } else {
    return ""
  }
}

const postNextPage = async (prevDocRef = null) => {
  const response = await fetch("/api/db/page", {
    method: "POST",
    body: JSON.stringify({ prevDocRef }),
    headers: {
      'Content-Type': 'application/json'
    }
  })
  const data = await response.json()

  return data
}


export default function Home() {

  const { data: session } = useSession();
  const [urlInput, setURLInput] = useState('');

  const [queryURLInput, setQueryURLInput] = useState('')
  const [urlData, setUrlData] = useState<queryReponse[]>([])

  const [queryURLData, setQueryURLData] = useState('')

  const [dataLoader, setDataLoader] = useState(false)

  const handleURLInputChange = (e: ChangeEvent<FormElement>) => {
    e.preventDefault();
    if (e.currentTarget.value)
      setURLInput(e.currentTarget.value);
  }

  const renderData = async () => {
    const data = await postNextPage()
    setUrlData(data.data)
    setDataLoader(false)
  }

  return (
    <>
    <SpeedInsights/>
      <div>
        <Head>
          <title>Tiny URL in Next JS</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div>
          {session ?
            <>
              <Grid.Container gap={1} css={{ margin: "3%" }}>

                <HeaderTitleText />

                <Grid xs={8}>
                  <div>
                    <Image src={session.user?.image as string} width={200} height={200} alt="github oauth image" />
                    <Text>Singin as {session.user?.name}</Text>
                    <Text>With email {session.user?.email} </Text>

                    <Button color="gradient" auto onClick={() => signOut()}>Signout</Button>

                    <div>
                      <Text> Want to see some short URLs?</Text>
                      <Button color="gradient" onClick={() => { renderData(); setDataLoader(true) }}>Update</Button>
                    </div>

                    {dataLoader ?
                      <Loading type="spinner" size="xl" css={{ marginTop: "20px" }} />
                      :
                      <div>
                        <UrlRow data={urlData} />
                      </div>

                    }
                  </div>

                </Grid>
                <Grid xs={4} >
                  <Navbar variant={"sticky"} css={{ height: "fit-content", paddingRight: "5%" }}>
                    <Input type="text" placeholder='Your Long URL' onChange={e => handleURLInputChange(e)} />
                    <Spacer y={1}></Spacer>
                    <Button color="gradient" onClick={() => postLongURL(urlInput, {
                      githubUserEmail: session.user?.email as string,
                      githubUserImageURL: session.user?.image as string,
                      githubUserName: session.user?.name as string
                    })}>post</Button>
                  <Spacer x={1}/>
                  </Navbar>

                </Grid>
              </Grid.Container>
            </>

            :

            <>
              <Grid.Container gap={1} css={{ margin: "3%" }}>
              <HeaderTitleText />
                <Grid xs={8}>
                  <div>
                    {/* <input type="text" placeholder='Your Long URL' onChange={e => setQueryURLInput(e.currentTarget.value)} />
                    <Button onClick={async () => { setQueryURLData(await queryURL(queryURLInput)) }}>Search</Button> */}
                    <div>{queryURLData}</div>
                    <Button color="gradient"onClick={(e) => { e.preventDefault; signIn() }}>Sign in</Button>
                  </div>
                </Grid>

                <Grid xs={4}>
                </Grid>
              </Grid.Container>
            </>

          }
        </div>
      </div>
    </>
  )
}